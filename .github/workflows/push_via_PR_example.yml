name: Push via PR example
# WARN : need write main protection rule

# repository settings requirement : Allow GitHub Actions to create and approve pull requests
permissions:
  contents: write
  pull-requests: write

# this workflow is triggered from UI
on:
  workflow_dispatch:

jobs:
  handle-dispatch:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: [ 20.x ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run create some diff
        run: |
          date > my_new_date.txt
          echo "BRANCH_NAME=update-version-${{ github.sha }}" >> $GITHUB_ENV
          echo "VERSION=0.0.1-fake" >> $GITHUB_ENV

      - name: Create a pull request
        id: cpr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.BYPASS_USER_PAT }}
          # base: main
          branch: ${{ env.BRANCH_NAME}}
          commit-message: Add version ${{ env.VERSION }}
          title: Automated version update to ${{ env.VERSION }}
          body: This PR updates the version file automatically. Generated from `push_via_PR_example.yml`.
          author: ChickArmy[bot] <github-actions[bot].chickarmy@users.noreply.github.com>

      # another way to create PR via actions/github-script
      #     - name: Create PR Review
      #       id: create_review
      #       uses: actions/github-script@v7
      #       with:
      #         script: |
      #           const prNumber = ${{ steps.find_pr.outputs.result }};
      #           const response = await github.rest.pulls.createReview({
      #             owner: context.repo.owner,
      #             repo: context.repo.repo,
      #             pull_number: prNumber,
      #             body: 'Cette PR est prête à être fusionnée.',
      #             event: 'APPROVE'
      #           });
      #           console.log(`Review created for pull request #${prNumber}.`);

      - name: Create Pull request outputs
        if: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      # another way to find PR via actions/github-script
      # - name: Find Pull Request
      #   id: find_pr
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const branchName = '${{ env.BRANCH_NAME }}';
      #       console.log(`Searching for pull request for branch: ${branchName}`);
      #       console.log(`Owner: ${context.repo.owner}, Repo: ${context.repo.repo}`);
      #       // DEBUG / console.log(context)
      #
      #       const prs = await github.rest.pulls.list({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         state: 'open',
      #       });
      #
      #       const pr = prs.data.find(pr => pr.head.ref === branchName);
      #       if (pr) {
      #         console.log(`Found pull request: #${pr.number} - ${pr.title}`);
      #         return pr.number;
      #       } else {
      #         console.log('No pull request found for this branch.');
      #         return null;
      #       }

      - name: Wait for Checks to Pass
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BYPASS_USER_PAT }}
          script: |
            const prNumber = ${{ steps.cpr.outputs.pull-request-number }};
            let allChecksPassed = false;
            const checkInterval = 30 * 1000; // 30 seconds
            const maxAttempts = 20; // Total wait time = maxAttempts * checkInterval
            let attempt = 0;
            
            while (attempt < maxAttempts) {
              console.log(`Checking status of CI/CD checks (Attempt ${attempt + 1}/${maxAttempts})...`);
            
              try {
                // get PR details to retrieve PR SHA
                const { data: { head: { sha } } } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                });
            
                // get PR checks
                const { data: { statuses } } = await github.rest.repos.getCombinedStatusForRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: sha,
                });
            
                if (statuses.length < 1) {
                  console.log('Await until CI/CD at least one check appears.');
                } else {
                  console.log("statuses :\n" + JSON.stringify(statuses, null, 2));
                  allChecksPassed = statuses.every(status => status.state === 'success');
            
                  if (allChecksPassed) {
                    console.log('All CI/CD checks have passed.');
                    break;
                  } else {
                    console.log('Not all checks are complete or successful yet. Waiting...');
                  }
                }
              } catch (error) {
                if (error.status === 404) {
                  console.log('Pull request not yet available, waiting...');
                } else {
                  throw error; // Rethrow if it's a different error
                }
              }
            
              await new Promise(resolve => setTimeout(resolve, checkInterval));
              attempt++;
            }
            
            if (!allChecksPassed) {
              throw new Error('CI/CD checks did not pass within the expected timeframe.');
            }

      # BYPASS_USER_PAT - fine-grained PAT with content+pullrequest write from user that can review
      - name: Merge Pull Request using authorized user to bypass rule
        if: ${{ steps.cpr.outputs.pull-request-number }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BYPASS_USER_PAT }}
          script: |
            const pull_number = ${{ steps.cpr.outputs.pull-request-number }};
            console.log(`Merging pull request: #${pull_number}`);
            await github.rest.pulls.merge({ 
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number, 
                  merge_method: 'rebase'
            });
            console.log(`Pull request #${pull_number} merged successfully.`);