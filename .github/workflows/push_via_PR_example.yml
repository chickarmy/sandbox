name: Push via PR example
# WARN : need write main protection rule

# repository settings requirement : Allow GitHub Actions to create and approve pull requests
permissions:
  contents: write
  pull-requests: write

# this workflow is triggered from UI
on:
  workflow_dispatch:

jobs:
  handle-dispatch:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: [ 20.x ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run create some diff
        run: |
          date > my_new_date.txt
          echo "BRANCH_NAME=update-version-${{ github.sha }}" >> $GITHUB_ENV
          echo "VERSION=0.0.1-fake" >> $GITHUB_ENV

      - name: Create a pull request
        uses: peter-evans/create-pull-request@v7
        with:
          # base: main
          branch: ${{ env.BRANCH_NAME}}
          commit-message: Add version ${{ env.VERSION }}
          title: Automated version update to ${{ env.VERSION }}
          body: This PR updates the version file automatically. Generated from `push_via_PR_example.yml`.
          author: ChickArmy[bot] <github-actions[bot].chickarmy@users.noreply.github.com>

      - name: Find Pull Request
        id: find_pr
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ env.BRANCH_NAME }}';
            console.log(`Searching for pull request for branch: ${branchName}`);
            console.log(`Owner: ${context.repo.owner}, Repo: ${context.repo.repo}`);
            // DEBUG / console.log(context)
            
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            const pr = prs.data.find(pr => pr.head.ref === branchName);
            if (pr) {
              console.log(`Found pull request: #${pr.number} - ${pr.title}`);
              return pr.number;
            } else {
              console.log('No pull request found for this branch.');
              return null;
            }

      # BYPASS_USER_PAT - fine-grained PAT with content+pullrequest write from user that can review
      - name: Create PR Review
        id: create_review
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.find_pr.outputs.result }};
            const response = await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              body: 'Cette PR est prête à être fusionnée.',
              event: 'APPROVE'
            });
            console.log(`Review created for pull request #${prNumber}.`);


      - name: Merge Pull Request using authorized user to bypass rule
        uses: actions/github-script@v7
        with:
          script: |
            const pull_number = ${{ steps.find_pr.outputs.result }};
            console.log(`Merging pull request: #${pull_number}`);
            const auth = process.env.BYPASS_USER_PAT;
            const octokit = new Octokit({
                 auth,
                 userAgent: 'my GHA stage',
                 timeZone: 'Europe/Paris',
                 baseUrl: 'https://api.github.com',
                 log: { debug: () => { }, info: () => { }, warn: console.warn, error: console.error },
                 request: { agent: undefined, fetch: undefined, timeout: 0 }
            });
            // merge pull request
            console.log(`Merging pull request: #${pull_number}`);
            await octokit.rest.pulls.merge({ owner, repo, pull_number, merge_method: 'rebase' });
            console.log(`Pull request #${pull_number} merged successfully.`);
        env:
          BYPASS_USER_PAT: ${{ secrets.BYPASS_USER_PAT }}