name: Publish to Public Repo Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest

    env:
      REPO_WEB_URL: https://github.com/chickarmy/chickenbot-web
      REPO_API_URL: https://api.github.com/repos/chickarmy/chickenbot-web
      FILE_NAME: package.readme.txt
      SKIP_PUBLISH: true

    steps:
      - name: Checkout private repo
        uses: actions/checkout@v3

      - name: Prepare file for release
        run: |
          echo 'this is sample publish from private repo' > $FILE_NAME
          mkdir -p ./packages
          mv $FILE_NAME ./packages/
          echo "Preparing file for release"

      - name: Create Release in Public Repo
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          RESPONSE_FILE="release_response.json"
          
          # Create the release and save the response in a file
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "'${{ github.ref_name }}'",
              "target_commitish": "main",
              "name": "'${{ github.ref_name }}'",
              "body": "Release from private repo",
              "draft": true,
              "prerelease": false
            }' \
            ${{ env.REPO_API_URL }}/releases > $RESPONSE_FILE

          # Display the API response
          echo "Release creation response:"
          cat $RESPONSE_FILE

          # Extract the release ID from the response file
          RELEASE_ID=$(jq -r '.id' $RESPONSE_FILE)
          RELEASE_UPLOAD_URL=$(jq -r '.upload_url' $RESPONSE_FILE)

          if [ "$RELEASE_ID" == "null" ]; then
            echo "Failed to create release: $(cat $RESPONSE_FILE)"
            exit 1
          fi

          echo "Release created successfully! id: $RELEASE_ID - upload_url: $RELEASE_UPLOAD_URL"
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
          echo "RELEASE_UPLOAD_URL=$RELEASE_UPLOAD_URL" >> $GITHUB_ENV

      # rely on @actions/github NodeJS library
      ## original action - WARN: archived repository
      ## uses: actions/upload-release-asset@v1
      ## https://github.com/actions/upload-release-asset/blob/main/src/upload-release-asset.js
      - name: Upload Release Asset
        id: upload-release-asset
        # more recent fork node16 @v1.1.1 => @main WARN about changes
        uses: sekwah41/upload-release-assets@main
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ./packages/${{ env.FILE_NAME }}
          asset_name: ${{ env.FILE_NAME }}
          asset_content_type: text/plain

      - name: Publish Draft Release
        if: ${{ env.SKIP_PUBLISH != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Convert the draft release to a published release
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"draft": false}' \
            ${{ env.REPO_API_URL }}/releases/${{ env.RELEASE_ID }}

      ## WARN : links are ok only when release is published
      - name: Echo published release and download links
        if: ${{ env.SKIP_PUBLISH != 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          RELEASE_URL="${{ env.REPO_WEB_URL }}/releases/tag/${{ github.ref_name }}"
          DOWNLOAD_URL="${{ env.REPO_WEB_URL }}/releases/download/${{ github.ref_name }}/package.readme.txt"

          echo "Release page: $RELEASE_URL"
          echo "Direct download link: $DOWNLOAD_URL"

      - name: Trigger workflow in doc public repository
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.everest-preview+json" \
            https://api.github.com/repos/chickarmy/chickenbot-web/dispatches \
            -d '{"event_type": "trigger-workflow", "client_payload": {"version": "${{ github.ref_name }}", "label": "release ${{ github.ref_name }}", "label_fr": "release ${{ github.ref_name }}", "description": "This is the description", "description_fr": "Ceci est la description", "note": "${{ env.REPO_WEB_URL }}/releases/tag/${{ github.ref_name }}", "download": "${{ env.REPO_WEB_URL }}/releases/download/${{ github.ref_name }}/package.readme.txt"}}'